<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="dao.BankAccountDao">
    <!-- 查询所有账户信息,封装到AccountVo中-->
    <select id="selectBankAccount" resultType="vo.BankAccountVo" parameterType="map">
        select b.id , b.account ,b.name,b.create_bank_name bankName,b.create_date createDate,b.balance , b.address_id addressId,GROUP_CONCAT(ap.province_name,' ',ac.city_name,' ',aa.area_name) as area
        from bank_account b
        left join address_area aa on aa.id = b.address_id
        left join address_city ac on ac.city_code = aa.parent_city_code
        left join address_province ap on ap.province_code = ac.parent_province_code
        <where>
            <if test="name !=null">
                b.name like concat('%',#{name},'%')
            </if>
            <if test="beginTime!=null">
                and  DATE_FORMAT(create_date, "%Y-%m-%d") >= DATE_FORMAT(#{beginTime}, "%Y-%m-%d")
            </if>
            <if test="endTime!=null">
                and  DATE_FORMAT(create_date,"%Y-%m-%d") &lt; DATE_FORMAT(#{endTime},"%Y-%m-%d")
            </if>

        </where>
        group by b.id

    </select>
    <update id="updateBankAccount" parameterType="entity.BankAccount">
        update bank_account
        <set>
            <if test="account != null">
                account = #{account},
            </if>
            <if test="name != null">
                name = #{name},
            </if>
            <if test="create_bank_name != null">
                create_bank_name = #{create_bank_name},
            </if>
            <if test="create_date != null">
                create_date = #{create_date},
            </if>
            <if test="address_id != null">
                address_id = #{address_id},
            </if>
        </set>
        where id = #{id}
    </update>

    <insert id="addBankAccount" parameterType="entity.BankAccount">
        insert into bank_account
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <if test="account != null">
                account,
            </if>
            <if test="name != null">
                name,
            </if>
            <if test="create_bank_name != null">
                create_bank_name,
            </if>
            <if test="create_date != null">
                create_date,
            </if>
            <if test="address_id != null">
                address_id,
            </if>
            <if test="balance != null">
                balance,
            </if>
        </trim>
        <trim prefix="values (" suffix=")" suffixOverrides=",">

            <if test="account != null">
                #{account},
            </if>
            <if test="name != null">
                #{name},
            </if>
            <if test="create_bank_name != null">
                #{create_bank_name},
            </if>
            <if test="create_date != null">
                #{create_date},
            </if>
            <if test="address_id != null">
                #{address_id},
            </if>
            <if test="balance != null">
                #{balance},
            </if>

        </trim>
    </insert>
    <delete id="deleteAccountById" parameterType="int">
        delete from bank_account where id = #{id}
    </delete>
    <delete id="deleteAccountByIds" parameterType="list">
        delete from bank_account where id in
        <foreach collection="list" item="id" open="(" close=")" separator=",">
            #{id}
        </foreach>

    </delete>
</mapper>